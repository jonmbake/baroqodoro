{"version":3,"sources":["components/AudioPlayer.tsx","logo.svg","components/Navbar.tsx","pages/Timer.tsx","pages/Log.tsx","pages/Settings.tsx","util/storageState.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PlayMode","CustomToggle","forwardRef","ref","children","onClick","href","e","preventDefault","NavbarExp","history","settings","completedToday","filter","hi","today","Date","toLocaleDateString","completed","includes","length","goalProgress","dailyGoal","Navbar","bg","variant","role","className","Brand","alt","src","logo","width","height","Dropdown","Toggle","as","id","progress","size","lineWidth","progressColor","showPercentage","Menu","align","Item","TimerMode","sortedSongs","songs","sort","a","b","composer","AudioPlayer","timerMode","playTrack","useState","Serial","playMode","setPlayMode","isMuted","setMuted","downloadUrl","selectedSong","setSelectedSong","audioRef","useRef","useEffect","current","play","pause","Focus","songsSelections","map","s","i","value","title","Row","Col","sm","lg","InputGroup","Prepend","Text","Form","Control","onChange","target","Append","Button","Repeat","currPlayMode","Shuffle","m","style","muted","onEnded","currentTime","Math","floor","random","findIndex","Main","setHistory","setTimerMode","useTimer","expiryTimestamp","now","onExpire","h","concat","HistoryItem","toLocaleString","minutes","seconds","resume","restart","isRunning","timerReady","setTimerReady","onTimerModeClick","tm","valueOf","ButtonGroup","ShortBreak","LongBreak","toString","padStart","xs","Log","rows","type","notes","prevHistory","ph","i2","Alert","Table","striped","bordered","hover","window","confirm","SettingsPage","setSettings","Group","controlId","Label","min","max","step","Settings","parseInt","getItem","sessionStorageKey","storage","valueStr","JSON","parse","useStateWithLocalStorage","initialState","state","React","setValue","stringify","setItem","App","localStorage","Container","path","exact","Timer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e576a127.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport { ArrowRepeat, MusicNoteBeamed, Shuffle, VolumeMute } from 'react-bootstrap-icons';\nimport Col from 'react-bootstrap/Col';\nimport songs from '../songs.json';\nimport { TimerMode } from '../pages/Timer';\n\nexport enum PlayMode {\n  Serial,\n  Repeat,\n  Shuffle\n}\n\ninterface AudioPlayerProps {\n  playTrack: boolean,\n  timerMode: TimerMode | undefined\n}\n\nconst sortedSongs = songs.sort((a, b) => a.composer > b.composer ? 1 : -1);\n\nconst AudioPlayer = ({timerMode, playTrack}: AudioPlayerProps) => {\n  const [playMode, setPlayMode] = useState(PlayMode.Serial);\n  const [isMuted, setMuted] = useState(false);\n  const [selectedSong, setSelectedSong] = useState(sortedSongs[0].downloadUrl)\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    if (playTrack) {\n      audioRef.current!.play();\n    } else {\n      audioRef.current!.pause();\n    }\n  }, [selectedSong, playTrack]);\n\n  // Mute and pause when taking a break\n  useEffect(() => {\n    if (timerMode === TimerMode.Focus) {\n      setMuted(false);\n    } else {\n      audioRef.current!.pause();\n      setMuted(true);\n    }\n  }, [timerMode]);\n\n  function onAudioEnded () {\n    if (playMode === PlayMode.Repeat) {\n      audioRef.current!.currentTime = 0;\n      audioRef.current!.play();\n    } else if (playMode === PlayMode.Shuffle) {\n      setSelectedSong(sortedSongs[Math.floor(Math.random() * sortedSongs.length)].downloadUrl);\n    } else {\n      let i =  sortedSongs.findIndex(s => s.downloadUrl === selectedSong);\n      if (i === sortedSongs.length - 1) {\n        i = 0;\n      } else {\n        ++i;\n      }\n      setSelectedSong(sortedSongs[i].downloadUrl);\n    }\n  }\n\n  const songsSelections = sortedSongs.map((s, i) => {\n    return (\n      <option key={ i } value={ s.downloadUrl }>{ s.composer } - { s.title }</option>\n    );\n  });\n\n  return (\n    <Row className=\"justify-content-center mt-5\">\n      <Col sm lg=\"8\" className=\"text-center\">\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"><MusicNoteBeamed /></InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control as=\"select\" onChange={ (e: ChangeEvent<any>) => { setSelectedSong(e.target.value)} } value={ selectedSong }>\n          { songsSelections }\n        </Form.Control>\n        <InputGroup.Append>\n          <Button title=\"Repeat the currently selected track\" className={ playMode === PlayMode.Repeat ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Repeat ? PlayMode.Serial : PlayMode.Repeat) } variant=\"outline-secondary\"><ArrowRepeat/></Button>\n          <Button title=\"Pick the next track randomly\" className={ playMode === PlayMode.Shuffle ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Shuffle ? PlayMode.Serial : PlayMode.Shuffle) } variant=\"outline-secondary\"><Shuffle/></Button>\n          <Button title=\"Mute\" className={ isMuted ? 'active' : '' }\n            onClick={ () => setMuted(m => !m) } variant=\"outline-secondary\"><VolumeMute/></Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <small className=\"text-muted\">Music courtesy of <a href=\"http://www.baroquemusic.org/\">baroquemusic.org</a></small>\n      <audio style={ {\"display\": \"none\"} } ref={ audioRef } src={ selectedSong } muted={ isMuted } onEnded={ onAudioEnded } />\n      </Col>\n    </Row>\n  );\n};\n\nexport default AudioPlayer;","export default __webpack_public_path__ + \"static/media/logo.8135ab22.svg\";","import { forwardRef } from 'react';\nimport Circle from 'react-circle';\nimport logo from '../logo.svg';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { DropdownToggleProps } from 'react-bootstrap/esm/DropdownToggle';\nimport { HistoryItem, Settings } from '../App';\n\nconst CustomToggle = forwardRef(({ children, onClick }: DropdownToggleProps, ref: any) => (\n  <a href=\"#\" ref={ref}\n    onClick={(e) => {\n      e.preventDefault();\n      onClick && onClick(e);\n    }}\n  >\n    {children}\n  </a>\n));\n\ninterface Props {\n  settings: Settings,\n  history: Array<HistoryItem>\n}\n\nconst NavbarExp = ({history, settings}: Props) => {\n\n  const completedToday = history.filter(hi => {\n    const today = new Date().toLocaleDateString();\n    return hi.completed.includes(today);\n  }).length;\n\n  const goalProgress = completedToday > settings.dailyGoal ? 100 : ((completedToday / settings.dailyGoal) * 100);\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" role=\"navigation\" className=\"justify-content-between\">\n      <Navbar.Brand href=\"/\"><img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" />{' '}Baroqodoro</Navbar.Brand>\n      <Dropdown>\n        <Dropdown.Toggle as={CustomToggle} id=\"dropdown-basic\">\n          <Circle progress={ goalProgress } size=\"30\" lineWidth=\"50\" progressColor=\"#28a745\" showPercentage={ false } />\n        </Dropdown.Toggle>\n        <Dropdown.Menu align=\"right\">\n          <Dropdown.Item href=\"/#/log\">Log</Dropdown.Item>\n          <Dropdown.Item href=\"/#/settings\">Settings</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </Navbar>\n  );\n}\n\nexport default NavbarExp;","import React, { Fragment, Dispatch, SetStateAction, useEffect, useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row';\nimport AudioPlayer from '../components/AudioPlayer';\nimport { useTimer } from 'react-timer-hook';\nimport { HistoryItem } from '../App';\n\nexport enum TimerMode {\n  Focus = 10000,\n  ShortBreak = 300000,\n  LongBreak = 600000\n}\n\nexport const historyStorageKey = 'baroqodoroLog';\n\ninterface Props {\n  setHistory: Dispatch<SetStateAction<Array<HistoryItem>>>\n}\n\nconst Main = ({ setHistory }: Props) => {\n  const [timerMode, setTimerMode] = useState(TimerMode.Focus);\n  const { minutes, seconds, pause, resume, restart, isRunning } = useTimer({ expiryTimestamp: Date.now() + TimerMode.Focus, onExpire: () => setHistory(h => h.concat(new HistoryItem(TimerMode[timerMode], new Date().toLocaleString(), ''))) })\n  // A hack because react-timer-hook doesn't allow pause on init\n  const [timerReady, setTimerReady] = useState(false);\n\n  useEffect(() => {\n    pause();\n    setTimerReady(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function onTimerModeClick (tm: TimerMode) {\n    setTimerMode(tm);\n    restart(Date.now() + tm.valueOf());\n  }\n\n  return (\n    <Fragment>\n      <Row className=\"justify-content-center\">\n        <ButtonGroup>\n          <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.Focus ? 'active' : '' } onClick={ () => onTimerModeClick(TimerMode.Focus) }>Focus</Button>\n          <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.ShortBreak ? 'active' : '' } onClick={ () => onTimerModeClick(TimerMode.ShortBreak) }>Short Break</Button>\n          <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.LongBreak ? 'active' : '' } onClick={ () => onTimerModeClick(TimerMode.LongBreak) }>Long Break</Button>\n        </ButtonGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-5\">\n        <div className=\"timer text-monospace\">{ minutes.toString().padStart(2, '0') }:{ seconds.toString().padStart(2, '0') }</div>\n      </Row>\n      <AudioPlayer timerMode={ timerMode } playTrack={ timerReady && isRunning } />\n      <Row className=\"justify-content-center mt-5\">\n        <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"primary\" onClick={ () => minutes === 0 && seconds === 0 ? restart(Date.now() + timerMode.valueOf()) : resume() }>Start</Button></Col>\n        <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"warning\" onClick={ pause }>Pause</Button></Col>\n        <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"danger\" onClick={ () => restart(Date.now() + timerMode.valueOf()) }>Restart</Button></Col>\n      </Row>\n    </Fragment>\n  )\n}\n\nexport default Main;","import React, { Fragment, Dispatch, SetStateAction } from \"react\";\nimport { Alert, Button, Table } from \"react-bootstrap\";\nimport { HistoryItem } from \"../App\";\n\ninterface Props {\n  history: Array<HistoryItem>,\n  setHistory: Dispatch<SetStateAction<Array<HistoryItem>>>\n}\n\nconst Log = ({ history, setHistory }: Props) => {\n\n  function clearLog () {\n    if(window.confirm('Are you sure that you want to clear the log?')) {\n      setHistory([]);\n    }\n  }\n\n  const rows = history.map((h, i) => {\n    return (\n      <tr key={i}>\n        <td>{ h.timerMode }</td>\n        <td>{ h.completed }</td>\n        <th><input type=\"text\" style={{ width: \"100%\" }} value={ h.notes } onChange={ (e) => setHistory(prevHistory => {\n          return prevHistory.map((ph, i2) => i2 === i ? {...ph, notes: e.target.value} : ph)\n        })}/></th>\n      </tr>\n    );\n  });\n\n  return (\n    <Fragment>\n      <h1>Log</h1>\n      <Alert variant=\"info\">\n        Log entries are saved to this browser's local storage. When clearning browser data, log entries will be lost.\n      </Alert>\n    <Table striped bordered hover className=\"mt-3\">\n      <thead>\n        <tr>\n          <th>Type</th>\n          <th>Time Completed</th>\n          <th>Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        { rows }\n      </tbody>\n    </Table>\n    <Button onClick={ clearLog }>Clear Log</Button>\n    </Fragment>\n  );\n}\n\nexport default Log;","import React, { Fragment, Dispatch, SetStateAction } from \"react\";\nimport { Alert, Form } from \"react-bootstrap\";\nimport { Settings } from \"../App\";\n\nexport const goalStorageKey = 'baroqodoroGoal';\n\ninterface Props {\n  settings: Settings,\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nconst SettingsPage = ({ settings, setSettings }: Props) => {\n  return (\n    <Fragment>\n      <h1>Settings</h1>\n      <Alert variant=\"info\">\n        Settings are saved to this browser's local storage. When clearning browser data, settings will be lost.\n      </Alert>\n      <Form className=\"mt-3\">\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Daily Focus Session Goal</Form.Label>\n          <Form.Control type=\"range\" min=\"1\" max=\"20\" step=\"1\" value={ settings.dailyGoal } onChange={ (e) => setSettings(new Settings((parseInt(e.target.value)))) }/>\n          <output>{ settings.dailyGoal }</output>\n          <Form.Text className=\"text-muted\">\n            Goal for how many Focus Session you wish to complete each day.\n          </Form.Text>\n        </Form.Group>\n      </Form>\n    </Fragment>\n  );\n}\n\nexport default SettingsPage;","import React, { Dispatch, SetStateAction } from 'react';\n\nexport function getItem (sessionStorageKey: string,  storage: Storage) {\n  const valueStr = storage.getItem(sessionStorageKey);\n  if (valueStr == null) {\n    return;\n  }\n  try {\n    return JSON.parse(valueStr);\n  } catch (e) {\n    return valueStr;\n  }\n}\n\nfunction useStateWithLocalStorage<S>(sessionStorageKey: string, initialState: S, storage: Storage) : [S, Dispatch<SetStateAction<S>>] {\n  let state: S = initialState;\n  if (getItem(sessionStorageKey, storage) != null) {\n    state = getItem(sessionStorageKey, storage);\n  }\n  const [value, setValue] = React.useState(state);\n\n  React.useEffect(() => {\n    let valueStr;\n    if (typeof value !== 'string') {\n      valueStr = JSON.stringify(value);\n    } else {\n      valueStr = value;\n    }\n    storage.setItem(sessionStorageKey, valueStr);\n  }, [storage, sessionStorageKey, value]);\n\n  React.useEffect(() => {\n    const i = getItem(sessionStorageKey, storage);\n    if (i != null) {\n      setValue(i);\n    }\n  }, [storage, sessionStorageKey]);\n  return [value, setValue];\n}\n\nexport default useStateWithLocalStorage;","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Container from 'react-bootstrap/Container'\nimport Timer from './pages/Timer';\nimport Log from './pages/Log';\nimport SettingsPage from './pages/Settings';\nimport useStateWithLocalStorage from './util/storageState';\n\nexport class Settings {\n  constructor (\n    public dailyGoal: number = 8\n  ) {}\n}\n\nexport class HistoryItem {\n  constructor (\n    public timerMode: string,\n    public completed: string,\n    public notes: string,\n  ) {}\n}\n\nconst App = () => {\n  const [history, setHistory] = useStateWithLocalStorage<Array<HistoryItem>>('baroqodoroLog', [], window.localStorage);\n  const [settings, setSettings] = useStateWithLocalStorage<Settings>('baroqodoroSettings', new Settings(), window.localStorage)\n\n  return (\n    <HashRouter>\n    <div className=\"App\">\n      <Navbar settings={ settings } history={ history }/>\n      <Container className=\"mt-5\">\n        <Switch>\n          <Route path=\"/\" exact>\n            <Timer setHistory={ setHistory } />\n          </Route>\n          <Route path=\"/log\" >\n            <Log history={ history } setHistory={ setHistory } />\n          </Route>\n          <Route path=\"/settings\">\n            <SettingsPage settings={ settings } setSettings={ setSettings }/>\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}