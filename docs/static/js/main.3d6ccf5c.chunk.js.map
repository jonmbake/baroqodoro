{"version":3,"sources":["components/Timer.tsx","logo.svg","components/Navbar.tsx","components/AudioPlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimerState","TimerMode","NavbarExp","Navbar","bg","variant","role","Brand","href","alt","src","logo","width","height","className","PlayMode","Timer","props","setTimerState","timerState","timerMode","intervalId","useRef","prevTimerState","useState","seconds","setSeconds","reset","Focus","ShortBreak","LongBreak","resetOnTimerModeChange","useCallback","formatTime","m","Math","floor","s","useEffect","Started","current","Completed","window","setInterval","Paused","clearInterval","Reset","formatTimeOnSecondsChange","document","title","Row","sortedSongs","songs","sort","a","b","composer","AudioPlayer","songSelectRef","Serial","playMode","setPlayMode","createAudio","songSrc","Audio","onended","Repeat","songAudioRef","play","Shuffle","updateSong","value","random","length","downloadUrl","i","selectedIndex","songsSelections","map","pause","remove","Col","sm","lg","InputGroup","Prepend","Text","id","Form","Control","as","ref","onChange","e","target","Append","Button","onClick","currPlayMode","App","audioPlayer","setTimerMode","keyboardShortcuts","event","code","currTimerState","addEventListener","removeEventListener","Container","ButtonGroup","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3d6ccf5c.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useCallback, useEffect, useRef, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\n\nexport enum TimerState {\n  Completed,\n  Started,\n  Paused,\n  Reset\n}\n\nexport enum TimerMode {\n  Focus,\n  ShortBreak,\n  LongBreak\n}\n\ninterface TimerProps {\n  setTimerState: Dispatch<SetStateAction<TimerState>>;\n  timerState: TimerState;\n  timerMode: TimerMode;\n}\n\nconst Timer = (props: TimerProps) => {\n  const { setTimerState, timerState, timerMode } = props;\n  const intervalId = useRef<number>();\n  const prevTimerState = useRef<TimerState>();\n  const [seconds, setSeconds] = useState(-1);\n\n  function reset () {\n    switch (timerMode) {\n      case TimerMode.Focus:\n        setSeconds(1500);\n        break;\n      case TimerMode.ShortBreak:\n        setSeconds(300);\n        break;\n      case TimerMode.LongBreak:\n        setSeconds(900);\n        break;\n    }\n  }\n\n  const resetOnTimerModeChange = useCallback(reset, [timerMode]);\n  useEffect(resetOnTimerModeChange, [resetOnTimerModeChange]);\n\n  useEffect(() => {\n    switch (timerState) {\n      case TimerState.Started:\n        if (prevTimerState.current === TimerState.Completed) {\n          reset();\n        }\n        intervalId.current = window.setInterval(() => {\n          setSeconds(s => s <= 0 ? 0 : --s)\n        }, 1000)\n        break;\n      case TimerState.Completed:\n      case TimerState.Paused:\n        clearInterval(intervalId.current);\n        break;\n      case TimerState.Reset:\n        clearInterval(intervalId.current);\n        // To Do - Refactor me because I am violating react-hooks/exhaustive-deps. After refactoring, remove the 'eslint-disable-next-line' below\n        reset();\n        break;\n    }\n    prevTimerState.current = timerState;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timerState]);\n\n  function formatTime () {\n    if (seconds <= 0) {\n      return \"00:00\";\n    }\n    const m = Math.floor(seconds % 3600 / 60);\n    const s = Math.floor(seconds % 3600 % 60);\n    return (m < 10 ? \"0\" : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s;\n  }\n\n  const formatTimeOnSecondsChange = useCallback(formatTime, [seconds]);\n  useEffect(() => {\n    document.title = formatTimeOnSecondsChange() + ' - Baroqodoro';\n  }, [formatTimeOnSecondsChange]);\n\n  // Reset timer when seconds hit zero\n  useEffect(() => {\n   if (TimerState.Started && seconds === 0) {\n     setSeconds(-1);\n     setTimerState(TimerState.Completed);\n   }\n  }, [seconds, timerState, setTimerState]);\n\n  return  (\n    <Row className=\"justify-content-center mt-5\">\n      <div className=\"timer text-monospace\">{ formatTime() }</div>\n    </Row>\n  );\n}\n\nexport default Timer;","export default __webpack_public_path__ + \"static/media/logo.8135ab22.svg\";","import logo from '../logo.svg';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst NavbarExp = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" role=\"navigation\">\n      <Navbar.Brand href=\"/\"><img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" />{' '}Baroqodoro</Navbar.Brand>\n    </Navbar>\n  );\n}\n\nexport default NavbarExp;","import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport { ArrowRepeat, FileMusic, Shuffle } from 'react-bootstrap-icons';\nimport Col from 'react-bootstrap/Col';\nimport songs from '../songs.json';\nimport { TimerMode, TimerState } from './Timer';\n\nexport enum PlayMode {\n  Serial,\n  Repeat,\n  Shuffle\n}\n\ninterface AudioPlayerProps {\n  timerState: TimerState,\n  timerMode: TimerMode\n}\n\nconst sortedSongs = songs.sort((a, b) => a.composer > b.composer ? 1 : -1);\n\nconst AudioPlayer = (props: AudioPlayerProps) => {\n  const songSelectRef = useRef<HTMLSelectElement>(null)\n  const [playMode, setPlayMode] = useState(PlayMode.Serial);\n  const createAudio = (songSrc: string) => {\n    const a = new Audio(songSrc);\n    a.onended = () => {\n      if (playMode === PlayMode.Repeat) {\n        songAudioRef.current.play();\n      } else if (playMode === PlayMode.Shuffle) {\n        const songSrc = songSelectRef.current!.value = sortedSongs[Math.floor(Math.random() * sortedSongs.length)].downloadUrl;\n        updateSong(songSrc);\n      } else {\n        let i =  songSelectRef.current!.selectedIndex;\n        if (i === sortedSongs.length - 1) {\n          i = 0;\n        } else {\n          ++i;\n        }\n        const songSrc = songSelectRef.current!.value = sortedSongs[i].downloadUrl;\n        updateSong(songSrc);\n      }\n    };\n    return a;\n  }\n  const songAudioRef = useRef(createAudio(sortedSongs[0].downloadUrl));\n\n  const songsSelections = sortedSongs.map((s, i) => {\n    return (\n      <option key={ i } value={ s.downloadUrl }>{ s.composer } - { s.title }</option>\n    );\n  });\n\n  useEffect(() => {\n    if (props.timerMode === TimerMode.Focus && props.timerState === TimerState.Started) {\n      songAudioRef.current.play();\n    } else {\n      songAudioRef.current.pause();\n    }\n  }, [props.timerState, props.timerMode]);\n\n  function updateSong (songSrc: string) {\n    songAudioRef.current.pause();\n    songAudioRef.current.remove();\n    songAudioRef.current = createAudio(songSrc);\n    if (props.timerState === TimerState.Started) {\n      songAudioRef.current.play();\n    }\n  }\n\n  return (\n    <Row className=\"justify-content-center mt-5\">\n      <Col sm lg=\"8\" className=\"text-center\">\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"><FileMusic /></InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control as=\"select\" ref={ songSelectRef} onChange={ (e: ChangeEvent<any>) => { updateSong(e.target.value)} }>\n          { songsSelections }\n        </Form.Control>\n        <InputGroup.Append>\n          <Button className={ playMode === PlayMode.Repeat ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Repeat ? PlayMode.Serial : PlayMode.Repeat) } variant=\"outline-secondary\"><ArrowRepeat/></Button>\n          <Button className={ playMode === PlayMode.Shuffle ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Shuffle ? PlayMode.Serial : PlayMode.Shuffle) } variant=\"outline-secondary\"><Shuffle/></Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <small className=\"text-muted\">Music courtesy of <a href=\"http://www.baroquemusic.org/\">baroquemusic.org</a></small>\n      </Col>\n    </Row>\n  );\n};\n\nexport default AudioPlayer;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Timer, { TimerState, TimerMode } from './components/Timer';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row';\nimport AudioPlayer from './components/AudioPlayer';\n\nconst App = () => {\n  const [timerState, setTimerState] = useState(TimerState.Paused);\n  const [timerMode, setTimerMode] = useState(TimerMode.Focus);\n\n  useEffect(() => {\n    const keyboardShortcuts = (event: any) => {\n      if (event.code === 'Space') {\n        setTimerState(currTimerState => TimerState.Paused === currTimerState ? TimerState.Started : TimerState.Paused)\n      }\n    };\n    document.addEventListener('keyup', keyboardShortcuts);\n    return function cleanup() {\n      document.removeEventListener('keyup', keyboardShortcuts);\n    };\n  }, []);\n\n  let audioPlayer;\n  //if (timerMode === TimerMode.Focus) {\n  audioPlayer = <AudioPlayer timerMode={ timerMode } timerState={ timerState } />;\n  //}\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Container>\n        <Row className=\"justify-content-center mt-5\">\n            <ButtonGroup>\n              <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.Focus ? 'active' : '' } onClick={ () => setTimerMode(TimerMode.Focus) }>Focus</Button>\n              <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.ShortBreak ? 'active' : '' } onClick={ () => setTimerMode(TimerMode.ShortBreak) }>Short Break</Button>\n              <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.LongBreak ? 'active' : '' } onClick={ () => setTimerMode(TimerMode.LongBreak) }>Long Break</Button>\n            </ButtonGroup>\n        </Row>\n        <Timer timerState={ timerState } timerMode={ timerMode } setTimerState={ setTimerState } />\n        { audioPlayer }\n        <Row className=\"justify-content-center mt-5\">\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"primary\" onClick={ () => setTimerState(TimerState.Started) }>Start</Button></Col>\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"warning\" onClick={ () => setTimerState(TimerState.Paused) }>Pause</Button></Col>\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"danger\" onClick={ () => setTimerState(TimerState.Reset) }>Reset</Button></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}