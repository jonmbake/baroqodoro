{"version":3,"sources":["components/AudioPlayer.tsx","logo.svg","components/Navbar.tsx","util/storageState.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PlayMode","NavbarExp","Navbar","bg","variant","role","Brand","href","alt","src","logo","width","height","className","sortedSongs","songs","sort","a","b","composer","AudioPlayer","timerMode","playTrack","useState","Serial","playMode","setPlayMode","isMuted","setMuted","downloadUrl","selectedSong","setSelectedSong","audioRef","useRef","useEffect","current","play","pause","TimerMode","Focus","songsSelections","map","s","i","value","title","Row","Col","sm","lg","InputGroup","Prepend","Text","id","Form","Control","as","onChange","e","target","Append","Button","Repeat","onClick","currPlayMode","Shuffle","m","style","ref","muted","onEnded","currentTime","Math","floor","random","length","findIndex","getItem","sessionStorageKey","storage","valueStr","JSON","parse","useStateWithLocalStorage","initialState","state","React","setValue","stringify","setItem","HistoryItem","completed","App","setTimerMode","window","localStorage","setHistory","useTimer","expiryTimestamp","Date","now","onExpire","h","concat","toLocaleString","minutes","seconds","resume","restart","isRunning","timerReady","setTimerReady","onTimerModeClick","tm","valueOf","Container","ButtonGroup","ShortBreak","LongBreak","toString","padStart","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60aa7304.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport { ArrowRepeat, MusicNoteBeamed, Shuffle, VolumeMute } from 'react-bootstrap-icons';\nimport Col from 'react-bootstrap/Col';\nimport songs from '../songs.json';\nimport { TimerMode } from '../App';\n\nexport enum PlayMode {\n  Serial,\n  Repeat,\n  Shuffle\n}\n\ninterface AudioPlayerProps {\n  playTrack: boolean,\n  timerMode: TimerMode | undefined\n}\n\nconst sortedSongs = songs.sort((a, b) => a.composer > b.composer ? 1 : -1);\n\nconst AudioPlayer = ({timerMode, playTrack}: AudioPlayerProps) => {\n  const [playMode, setPlayMode] = useState(PlayMode.Serial);\n  const [isMuted, setMuted] = useState(false);\n  const [selectedSong, setSelectedSong] = useState(sortedSongs[0].downloadUrl)\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    if (playTrack) {\n      audioRef.current!.play();\n    } else {\n      audioRef.current!.pause();\n    }\n  }, [selectedSong, playTrack]);\n\n  // Mute and pause when taking a break\n  useEffect(() => {\n    if (timerMode === TimerMode.Focus) {\n      setMuted(false);\n    } else {\n      audioRef.current!.pause();\n      setMuted(true);\n    }\n  }, [timerMode]);\n\n  function onAudioEnded () {\n    if (playMode === PlayMode.Repeat) {\n      audioRef.current!.currentTime = 0;\n      audioRef.current!.play();\n    } else if (playMode === PlayMode.Shuffle) {\n      setSelectedSong(sortedSongs[Math.floor(Math.random() * sortedSongs.length)].downloadUrl);\n    } else {\n      let i =  sortedSongs.findIndex(s => s.downloadUrl === selectedSong);\n      if (i === sortedSongs.length - 1) {\n        i = 0;\n      } else {\n        ++i;\n      }\n      setSelectedSong(sortedSongs[i].downloadUrl);\n    }\n  }\n\n  const songsSelections = sortedSongs.map((s, i) => {\n    return (\n      <option key={ i } value={ s.downloadUrl }>{ s.composer } - { s.title }</option>\n    );\n  });\n\n  return (\n    <Row className=\"justify-content-center mt-5\">\n      <Col sm lg=\"8\" className=\"text-center\">\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"><MusicNoteBeamed /></InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control as=\"select\" onChange={ (e: ChangeEvent<any>) => { setSelectedSong(e.target.value)} } value={ selectedSong }>\n          { songsSelections }\n        </Form.Control>\n        <InputGroup.Append>\n          <Button title=\"Repeat the currently selected track\" className={ playMode === PlayMode.Repeat ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Repeat ? PlayMode.Serial : PlayMode.Repeat) } variant=\"outline-secondary\"><ArrowRepeat/></Button>\n          <Button title=\"Pick the next track randomly\" className={ playMode === PlayMode.Shuffle ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Shuffle ? PlayMode.Serial : PlayMode.Shuffle) } variant=\"outline-secondary\"><Shuffle/></Button>\n          <Button title=\"Mute\" className={ isMuted ? 'active' : '' }\n            onClick={ () => setMuted(m => !m) } variant=\"outline-secondary\"><VolumeMute/></Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <small className=\"text-muted\">Music courtesy of <a href=\"http://www.baroquemusic.org/\">baroquemusic.org</a></small>\n      <audio style={ {\"display\": \"none\"} } ref={ audioRef } src={ selectedSong } muted={ isMuted } onEnded={ onAudioEnded } />\n      </Col>\n    </Row>\n  );\n};\n\nexport default AudioPlayer;","export default __webpack_public_path__ + \"static/media/logo.8135ab22.svg\";","import logo from '../logo.svg';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst NavbarExp = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" role=\"navigation\">\n      <Navbar.Brand href=\"/\"><img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" />{' '}Baroqodoro</Navbar.Brand>\n    </Navbar>\n  );\n}\n\nexport default NavbarExp;","import React, { Dispatch, SetStateAction } from 'react';\n\nfunction getItem (sessionStorageKey: string,  storage: Storage) {\n  const valueStr = storage.getItem(sessionStorageKey);\n  if (valueStr == null) {\n    return;\n  }\n  try {\n    return JSON.parse(valueStr);\n  } catch (e) {\n    return valueStr;\n  }\n}\n\nfunction useStateWithLocalStorage<S>(sessionStorageKey: string, initialState: S, storage: Storage) : [S, Dispatch<SetStateAction<S>>] {\n  let state: S = initialState;\n  if (getItem(sessionStorageKey, storage) != null) {\n    state = getItem(sessionStorageKey, storage);\n  }\n  const [value, setValue] = React.useState(state);\n\n  React.useEffect(() => {\n    let valueStr;\n    if (typeof value !== 'string') {\n      valueStr = JSON.stringify(value);\n    } else {\n      valueStr = value;\n    }\n    storage.setItem(sessionStorageKey, valueStr);\n  }, [storage, sessionStorageKey, value]);\n\n  React.useEffect(() => {\n    const i = getItem(sessionStorageKey, storage);\n    if (i != null) {\n      setValue(i);\n    }\n  }, [storage, sessionStorageKey]);\n  return [value, setValue];\n}\n\nexport default useStateWithLocalStorage;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row';\nimport AudioPlayer from './components/AudioPlayer';\nimport { useTimer } from 'react-timer-hook';\nimport useStateWithLocalStorage from './util/storageState';\n\nexport enum TimerMode {\n  Focus = 1500000,\n  ShortBreak = 300000,\n  LongBreak = 600000\n}\n\nclass HistoryItem {\n  constructor (\n    public timerMode: string,\n    public completed: string,\n  ) {}\n}\n\nconst App = () => {\n  const [timerMode, setTimerMode] = useState(TimerMode.Focus);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [history, setHistory] = useStateWithLocalStorage<Array<HistoryItem>>('baroqodoro-history', [], window.localStorage);\n  const { minutes, seconds, pause, resume, restart, isRunning } = useTimer({ expiryTimestamp: Date.now() + TimerMode.Focus, onExpire: () => setHistory(h => h.concat(new HistoryItem(TimerMode[timerMode], new Date().toLocaleString()))) })\n  // A hack because react-timer-hook doesn't allow pause on init\n  const [timerReady, setTimerReady] = useState(false);\n\n  useEffect(() => {\n    pause();\n    setTimerReady(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function onTimerModeClick (tm: TimerMode) {\n    setTimerMode(tm);\n    restart(Date.now() + tm.valueOf());\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Container>\n        <Row className=\"justify-content-center mt-5\">\n            <ButtonGroup>\n              <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.Focus ? 'active' : '' } onClick={ () => onTimerModeClick(TimerMode.Focus) }>Focus</Button>\n              <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.ShortBreak ? 'active' : '' } onClick={ () => onTimerModeClick(TimerMode.ShortBreak) }>Short Break</Button>\n              <Button variant=\"outline-secondary\" className={ timerMode === TimerMode.LongBreak ? 'active' : '' } onClick={ () => onTimerModeClick(TimerMode.LongBreak) }>Long Break</Button>\n            </ButtonGroup>\n        </Row>\n        <Row className=\"justify-content-center mt-5\">\n          <div className=\"timer text-monospace\">{ minutes.toString().padStart(2, '0') }:{ seconds.toString().padStart(2, '0') }</div>\n        </Row>\n        <AudioPlayer timerMode={ timerMode } playTrack={ timerReady && isRunning } />\n        <Row className=\"justify-content-center mt-5\">\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"primary\" onClick={ () => minutes === 0 && seconds === 0 ? restart(Date.now() + timerMode.valueOf()) : resume() }>Start</Button></Col>\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"warning\" onClick={ pause }>Pause</Button></Col>\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"danger\" onClick={ () => restart(Date.now() + timerMode.valueOf()) }>Restart</Button></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}