{"version":3,"sources":["components/Timer.tsx","logo.svg","components/Navbar.tsx","components/AudioPlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimerState","TimerType","NavbarExp","Navbar","bg","variant","role","Brand","href","alt","src","logo","width","height","className","PlayMode","Timer","props","timerState","timerType","intervalId","useRef","useState","seconds","setSeconds","reset","Focus","ShortBreak","LongBreak","resetOnTimerTypeChange","useCallback","formatTime","m","Math","floor","s","useEffect","Started","current","window","setInterval","Paused","clearInterval","Reset","formatTimeOnSecondsChange","document","title","Row","sortedSongs","songs","sort","a","b","composer","AudioPlayer","songSelectRef","Serial","playMode","setPlayMode","createAudio","songSrc","Audio","onended","Repeat","songAudioRef","play","Shuffle","updateSong","value","random","length","downloadUrl","i","selectedIndex","songsSelections","map","pause","remove","Col","sm","lg","InputGroup","Prepend","Text","id","Form","Control","as","ref","onChange","e","target","Append","Button","onClick","currPlayMode","App","audioPlayer","setTimerState","setTimerType","keyboardShortcuts","event","code","currTimerState","addEventListener","removeEventListener","Container","ButtonGroup","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f253e8f1.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\n\nexport enum TimerState {\n  Started,\n  Paused,\n  Reset\n}\n\nexport enum TimerType {\n  Focus,\n  ShortBreak,\n  LongBreak\n}\n\ninterface TimerProps {\n  timerState: TimerState;\n  timerType: TimerType;\n}\n\nconst Timer = (props: TimerProps) => {\n  const { timerState, timerType } = props;\n  const intervalId = useRef<number>();\n  const [seconds, setSeconds] = useState(0);\n\n  function reset () {\n    switch (timerType) {\n      case TimerType.Focus:\n        setSeconds(1500);\n        break;\n      case TimerType.ShortBreak:\n        setSeconds(300);\n        break;\n      case TimerType.LongBreak:\n        setSeconds(900);\n        break;\n    }\n  }\n\n  const resetOnTimerTypeChange = useCallback(reset, [timerType]);\n  useEffect(resetOnTimerTypeChange, [resetOnTimerTypeChange]);\n\n  useEffect(() => {\n    switch (timerState) {\n      case TimerState.Started:\n        intervalId.current = window.setInterval(() => {\n          setSeconds(s => s <= 0 ? 0 : --s)\n        }, 1000)\n        break;\n      case TimerState.Paused:\n        clearInterval(intervalId.current);\n        break;\n      case TimerState.Reset:\n        clearInterval(intervalId.current);\n        // To Do - Refactor me because I am violating react-hooks/exhaustive-deps. After refactoring, remove the 'eslint-disable-next-line' below\n        reset();\n        break;\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timerState]);\n\n  function formatTime () {\n    const m = Math.floor(seconds % 3600 / 60);\n    const s = Math.floor(seconds % 3600 % 60);\n    return (m < 10 ? \"0\" : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s;\n  }\n\n  const formatTimeOnSecondsChange = useCallback(formatTime, [seconds]);\n  useEffect(() => {\n    document.title = formatTimeOnSecondsChange() + ' - Baroqodoro';\n  }, [formatTimeOnSecondsChange]);\n\n  // Reset timer when seconds hit zero\n  useEffect(() => {\n   if (seconds === 0) {\n    clearInterval(intervalId.current);\n    resetOnTimerTypeChange();\n   }\n  }, [seconds, resetOnTimerTypeChange]);\n\n  return  (\n    <Row className=\"justify-content-center mt-5\">\n      <div className=\"timer text-monospace\">{ formatTime() }</div>\n    </Row>\n  );\n}\n\nexport default Timer;","export default __webpack_public_path__ + \"static/media/logo.8135ab22.svg\";","import logo from '../logo.svg';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst NavbarExp = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" role=\"navigation\">\n      <Navbar.Brand href=\"/\"><img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" />{' '}Baroqodoro</Navbar.Brand>\n    </Navbar>\n  );\n}\n\nexport default NavbarExp;","import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport { ArrowRepeat, FileMusic, Shuffle } from 'react-bootstrap-icons';\nimport Col from 'react-bootstrap/Col';\nimport songs from '../songs.json';\nimport { TimerState } from './Timer';\n\nexport enum PlayMode {\n  Serial,\n  Repeat,\n  Shuffle\n}\n\ninterface AudioPlayerProps {\n  timerState: TimerState\n}\n\nconst sortedSongs = songs.sort((a, b) => a.composer > b.composer ? 1 : -1);\n\nconst AudioPlayer = (props: AudioPlayerProps) => {\n  const songSelectRef = useRef<HTMLSelectElement>(null)\n  const [playMode, setPlayMode] = useState(PlayMode.Serial);\n  const createAudio = (songSrc: string) => {\n    const a = new Audio(songSrc);\n    a.onended = () => {\n      if (playMode === PlayMode.Repeat) {\n        songAudioRef.current.play();\n      } else if (playMode === PlayMode.Shuffle) {\n        const songSrc = songSelectRef.current!.value = sortedSongs[Math.floor(Math.random() * sortedSongs.length)].downloadUrl;\n        updateSong(songSrc);\n      } else {\n        let i =  songSelectRef.current!.selectedIndex;\n        if (i === sortedSongs.length - 1) {\n          i = 0;\n        } else {\n          ++i;\n        }\n        const songSrc = songSelectRef.current!.value = sortedSongs[i].downloadUrl;\n        updateSong(songSrc);\n      }\n    };\n    return a;\n  }\n  const songAudioRef = useRef(createAudio(sortedSongs[0].downloadUrl));\n\n  const songsSelections = sortedSongs.map((s, i) => {\n    return (\n      <option key={ i } value={ s.downloadUrl }>{ s.composer } - { s.title }</option>\n    );\n  });\n\n  useEffect(() => {\n    if (props.timerState === TimerState.Started) {\n      songAudioRef.current.play();\n    } else {\n      songAudioRef.current.pause();\n    }\n  }, [props.timerState]);\n\n  function updateSong (songSrc: string) {\n    songAudioRef.current.pause();\n    songAudioRef.current.remove();\n    songAudioRef.current = createAudio(songSrc);\n    if (props.timerState === TimerState.Started) {\n      songAudioRef.current.play();\n    }\n  }\n\n  return (\n    <Row className=\"justify-content-center mt-5\">\n      <Col sm lg=\"8\" className=\"text-center\">\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"><FileMusic /></InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control as=\"select\" ref={ songSelectRef} onChange={ (e: ChangeEvent<any>) => { updateSong(e.target.value)} }>\n          { songsSelections }\n        </Form.Control>\n        <InputGroup.Append>\n          <Button className={ playMode === PlayMode.Repeat ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Repeat ? PlayMode.Serial : PlayMode.Repeat) } variant=\"outline-secondary\"><ArrowRepeat/></Button>\n          <Button className={ playMode === PlayMode.Shuffle ? 'active' : '' }\n            onClick={ () => setPlayMode(currPlayMode => currPlayMode === PlayMode.Shuffle ? PlayMode.Serial : PlayMode.Shuffle) } variant=\"outline-secondary\"><Shuffle/></Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <small className=\"text-muted\">Music courtesy of <a href=\"http://www.baroquemusic.org/\">baroquemusic.org</a></small>\n      </Col>\n    </Row>\n  );\n};\n\nexport default AudioPlayer;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Timer, { TimerState, TimerType } from './components/Timer';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row';\nimport AudioPlayer from './components/AudioPlayer';\n\nconst App = () => {\n  const [timerState, setTimerState] = useState(TimerState.Paused);\n  const [timerType, setTimerType] = useState(TimerType.Focus);\n\n  useEffect(() => {\n    const keyboardShortcuts = (event: any) => {\n      if (event.code === 'Space') {\n        setTimerState(currTimerState => TimerState.Paused === currTimerState ? TimerState.Started : TimerState.Paused)\n      }\n    };\n    document.addEventListener('keyup', keyboardShortcuts);\n    return function cleanup() {\n      document.removeEventListener('keyup', keyboardShortcuts);\n    };\n  }, []);\n\n  let audioPlayer;\n  //if (timerType === TimerType.Focus) {\n  audioPlayer = <AudioPlayer timerState={ timerState } />;\n  //}\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Container>\n        <Row className=\"justify-content-center mt-5\">\n            <ButtonGroup>\n              <Button variant=\"outline-secondary\" className={ timerType === TimerType.Focus ? 'active' : '' } onClick={ () => setTimerType(TimerType.Focus) }>Focus</Button>\n              <Button variant=\"outline-secondary\" className={ timerType === TimerType.ShortBreak ? 'active' : '' } onClick={ () => setTimerType(TimerType.ShortBreak) }>Short Break</Button>\n              <Button variant=\"outline-secondary\" className={ timerType === TimerType.LongBreak ? 'active' : '' } onClick={ () => setTimerType(TimerType.LongBreak) }>Long Break</Button>\n            </ButtonGroup>\n        </Row>\n        <Timer timerState={ timerState } timerType={ timerType } />\n        { audioPlayer }\n        <Row className=\"justify-content-center mt-5\">\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"primary\" onClick={ () => setTimerState(TimerState.Started) }>Start</Button></Col>\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"warning\" onClick={ () => setTimerState(TimerState.Paused) }>Pause</Button></Col>\n          <Col className=\"text-center\" xs lg=\"2\"><Button className=\"btn-xl\" variant=\"danger\" onClick={ () => setTimerState(TimerState.Reset) }>Reset</Button></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}